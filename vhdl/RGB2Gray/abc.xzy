--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : AdderNbit.vhd
-- Created date   : Thứ sáu, 24 Tháng hai Năm 2017 13:44:20 ICT
-- Author         : Huy Hung Ho
-- Last modified  : Mon 27 Feb 2017
-- Desc           :
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;

entity AdderNbit is
	Generic (N:	integer := 32);
	Port (	a, b:	IN STD_LOGIC_VECTOR (N - 1 downto 0);
		Cin:	IN STD_LOGIC;
		S:	OUT STD_LOGIC_VECTOR (N - 1 downto 0);
		Cout:	OUT STD_LOGIC);
end AdderNbit;

Architecture Behavioral of AdderNbit is
	Component FullAdder is
        Port (  a, b, Cin:      IN std_logic;
                S, Cout:        OUT std_logic
        );
	End component;

	Signal	C:	std_logic_vector(N - 2 downto 0);
Begin
	F1: FullAdder
		port map( a => a(0),
			  b => b(0),
			  Cin => Cin,
			  S => S(0),
			  Cout => C(0));

	FN: For i in 1 to N - 2 generate
		Fi: FullAdder
			port map( a => a(i),
				  b => b(i),
				  Cin => C(i - 1),
				  S => S(i),
				  Cout => C(i));
	End generate;

	FE: FullAdder
		port map( a => a(N - 1),
			  b => b(N - 1),
			  Cin => C(N - 2),
			  S => S(N - 1),
			  Cout => Cout);
End Behavioral;
--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : Controller.vhd
-- Created date   : Mon 13 Mar 2017
-- Author         : Huy Hung Ho
-- Last modified  : Mon 13 Mar 2017
-- Desc           :
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;
Use IEEE.numeric_std.all;
Use work.ram_pkg.all;
Use work.helper.all;

Entity Controller is
	Port (
		Clk:	IN std_logic;
		Start:	IN std_logic;
		Done:	OUT std_logic;
		LoadR:	OUT std_logic;
		LoadG:	OUT std_logic;
		LoadB:	OUT std_logic;
		StoreY: OUT std_logic;
		Move:	OUT std_logic
	);
End Controller;

Architecture Behavioral of Controller is
	Type	states is (HaltS, LoadRS, LoadGS, LoadBS, StoreS);
	Signal	state:	states := HaltS;
	Signal	CNT:	unsigned(addr_width-1 downto 0);
Begin
	Done	<= '1' when state = HaltS	else '0';
	LoadR	<= '1' when state = LoadRS	else '0';
	LoadG	<= '1' when state = LoadGS	else '0';
	LoadB	<= '1' when state = LoadBS	else '0';
	StoreY	<= '1' when state = StoreS	else '0';

	Process(Clk)
	Begin
		if rising_edge(Clk) then
			Case state is
				when HaltS	=> if Start = '1' then
							state <= LoadRS;
						   end if;
				when LoadRS	=> state <= LoadGS;
				when LoadGS	=> state <= LoadBS;
				when LoadBS	=> state <= StoreS;
				when StoreS	=> if (CNT = Cell_extend_width)
						then
							state <= HaltS;
						else
							state <= LoadRS;
						end if;
			end case;
		end if;
	End process;

	Process(clk)
	Begin
		if rising_edge(Clk) then
			if state = HaltS then
				CNT <= to_unsigned(0, addr_width);
			elsif state = StoreS then
				CNT <= CNT + 1;
			end if;
		end if;
	End process;
End Behavioral;

--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : FullAdder.vhd
-- Created date   : Thứ sáu, 24 Tháng hai Năm 2017 13:44:30 ICT
-- Author         : Huy Hung Ho
-- Last modified  : Thứ sáu, 24 Tháng hai Năm 2017 13:44:30 ICT
-- Desc           :
--------------------------------------------------------------------------------
Library IEEE;
Use IEEE.std_logic_1164.all;

Entity FullAdder is
	Port (	a, b, Cin:	IN std_logic;
		S, Cout:	OUT std_logic
	);
End FullAdder;

Architecture Behavioral of FullAdder is
Begin
	S <= a xor b xor Cin;
	Cout <= (a and b) or (Cin and a) or (Cin and b);
end Behavioral;
--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : MultBlue.vhd
-- Created date   : Thứ sáu, 24 Tháng hai Năm 2017 12:05:44 ICT
-- Author         : Huy Hung Ho
-- Last modified  : Mon 27 Feb 2017
-- Desc           :
--	YR:	19595:	0100110010001011
--	YB:	7471:	0001110100101111
--	YG:	38470:	1001011001000110
--	AdderBlue
--	= Data<<12 + Data<<11 + Data<<10 + Data<<8 + Data<<5 + Data<<3 + Data<<2 + Data<<1 + Data;
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;

Entity MultBlue is
	Port (	Clk:	IN std_logic;
		Data:	IN std_logic_vector(7 downto 0);
		Result:	OUT std_logic_vector(31 downto 0)
	);
End MultBlue;

Architecture Behavioral of MultBlue is
	Component AdderNbit is
		Generic (N:	integer := 32);
		Port (	a, b:	IN STD_LOGIC_VECTOR (N - 1  downto 0);
			Cin:	IN STD_LOGIC;
			S:      OUT STD_LOGIC_VECTOR (N - 1 downto 0);
			Cout:   OUT STD_LOGIC
		);
	End component;

	Signal	Cin:	std_logic := '0';
	Signal	Cout:	std_logic := '0';
	Signal	In1, In2, In3, In4:		std_logic_vector(31 downto 0);
	Signal	In5, In6, In7, In8, In9:	std_logic_vector(31 downto 0);
	Signal	Out1, Out2, Out3, Out4:		std_logic_vector(31 downto 0);
	Signal	Out5, Out6, Out7:		std_logic_vector(31 downto 0);
Begin
	In1 <= "000000000000" & Data & "000000000000";
	In2 <= "0000000000000" & Data & "00000000000";
	In3 <= "00000000000000" & Data & "0000000000";
	In4 <= "0000000000000000" & Data & "00000000";
	In5 <= "0000000000000000000" & Data & "00000";
	In6 <= "000000000000000000000" & Data & "000";
	In7 <= "0000000000000000000000" & Data & "00";
	In8 <= "00000000000000000000000" & Data & "0";
	In9 <= "000000000000000000000000" & Data     ;

	F1:	AdderNbit generic map(32)
		port map (	a => In1,
			  	b => In2,
				Cin => Cin,
				S => Out1,
				Cout => Cout
		);

	F2:	AdderNbit generic map(32)
		port map (	a => In3,
			  	b => In4,
				Cin => Cin,
				S => Out2,
				Cout => Cout
		);

	F3:	AdderNbit generic map(32)
		port map (	a => In5,
			  	b => In6,
				Cin => Cin,
				S => Out3,
				Cout => Cout
		);

	F4:	AdderNbit generic map(32)
		port map (	a => In7,
			  	b => In8,
				Cin => Cin,
				S => Out4,
				Cout => Cout
		);

	F5:	AdderNbit generic map(32)
		port map (	a => Out1,
			  	b => Out2,
				Cin => Cin,
				S => Out5,
				Cout => Cout
		);

	F6:	AdderNbit generic map(32)
		port map (	a => Out3,
			  	b => Out4,
				Cin => Cin,
				S => Out6,
				Cout => Cout
		);

	F7:	AdderNbit generic map(32)
		port map (	a => Out5,
			  	b => Out6,
				Cin => Cin,
				S => Out7,
				Cout => Cout
		);

	F8:	AdderNbit generic map(32)
		port map (	a => Out7,
			  	b => In9,
				Cin => Cin,
				S => Result,
				Cout => Cout
		);
End Behavioral;

--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : MultGreen.vhd
-- Created date   : Thứ sáu, 24 Tháng hai Năm 2017 12:05:44 ICT
-- Author         : Huy Hung Ho
-- Last modified  : Mon 27 Feb 2017
-- Desc           :
--	YR:	19595:	0100110010001011
--	YB:	7471:	0001110100101111
--	YG:	38470:	1001011001000110
--	AdderGreen
--	= Data<<15 + Data<<12 + Data<<10 + Data<<9 + Data<<6 + Data<<2 + Data<<1
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;
Use IEEE.numeric_std.all;

Entity MultGreen is
	Port (	Clk:	IN std_logic;
		Data:	IN std_logic_vector(7 downto 0);
		Result:	OUT std_logic_vector(31 downto 0)
	);
End MultGreen;

Architecture Behavioral of MultGreen is
	Component AdderNbit is
		Generic (N:	integer := 32);
		Port (	a, b:	IN STD_LOGIC_VECTOR (N - 1  downto 0);
			Cin:	IN STD_LOGIC;
			S:      OUT STD_LOGIC_VECTOR (N - 1 downto 0);
			Cout:   OUT STD_LOGIC
		);
	End component;

	Signal	Cin:	std_logic := '0';
	Signal	Cout:	std_logic := '0';
	Signal	In1, In2, In3, In4:	std_logic_vector(31 downto 0);
	Signal	In5, In6, In7:		std_logic_vector(31 downto 0);
	Signal	Out1, Out2, Out3:	std_logic_vector(31 downto 0);
	Signal	Out4, Out5, Out6:	std_logic_vector(31 downto 0);
Begin
	In1 <= "000000000" & Data & "000000000000000";
	In2 <= "000000000000" & Data & "000000000000";
	In3 <= "00000000000000" & Data & "0000000000";
	In4 <= "000000000000000" & Data & "000000000";
	In5 <= "000000000000000000" & Data & "000000";
	In6 <= "0000000000000000000000" & Data & "00";
	In7 <= "00000000000000000000000" & Data & "0";

	F1:	AdderNbit generic map(32)
		port map (	a => In1,
			  	b => In2,
				Cin => Cin,
				S => Out1,
				Cout => Cout
		);

	F2:	AdderNbit generic map(32)
		port map (	a => In3,
			  	b => In4,
				Cin => Cin,
				S => Out2,
				Cout => Cout
		);

	F3:	AdderNbit generic map(32)
		port map (	a => In5,
			  	b => In6,
				Cin => Cin,
				S => Out3,
				Cout => Cout
		);

	F4:	AdderNbit generic map(32)
		port map (	a => Out1,
			  	b => Out2,
				Cin => Cin,
				S => Out4,
				Cout => Cout
		);

	F5:	AdderNbit generic map(32)
		port map (	a => In7,
			  	b => Out3,
				Cin => Cin,
				S => Out5,
				Cout => Cout
		);

	F6:	AdderNbit generic map(32)
		port map (	a => Out4,
			  	b => Out5,
				Cin => Cin,
				S => Result,
				Cout => Cout
		);
End Behavioral;

--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : MultRed.vhd
-- Created date   : Thứ sáu, 24 Tháng hai Năm 2017 12:05:44 ICT
-- Author         : Huy Hung Ho
-- Last modified  : Thứ sáu, 24 Tháng hai Năm 2017 15:27:35 ICT
-- Desc           :
--	YR:	19595:	0100110010001011
--	YG:	7471:	0001110100101111
--	YB:	38470:	1001011001000110
--	AdderRed
--	= Data<<14 + Data<<11 + Data<<10 + Data<<7 + Data<<3 + Data<<1 + Data;
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;

Entity MultRed is
	Port (	Clk:	IN std_logic;
		Data:	IN std_logic_vector(7 downto 0);
		Result:	OUT std_logic_vector(31 downto 0)
	);
End MultRed;

Architecture Behavioral of MultRed is
	Component AdderNbit is
		Generic (N:	integer := 32);
		Port (	a, b:	IN STD_LOGIC_VECTOR (N - 1  downto 0);
			Cin:	IN STD_LOGIC;
			S:      OUT STD_LOGIC_VECTOR (N - 1 downto 0);
			Cout:   OUT STD_LOGIC
		);
	End component;

	Signal	Cin:	std_logic := '0';
	Signal	Cout:	std_logic := '0';
	Signal	In1, In2, In3, In4:	std_logic_vector(31 downto 0);
	Signal	In5, In6, In7:		std_logic_vector(31 downto 0);
	Signal	Out1, Out2, Out3:	std_logic_vector(31 downto 0);
	Signal	Out4, Out5:		std_logic_vector(31 downto 0);
Begin
	In1 <= "0000000000" & Data & "00000000000000";
	In2 <= "0000000000000" & Data & "00000000000";
	In3 <= "00000000000000" & Data & "0000000000";
	In4 <= "00000000000000000" & Data & "0000000";
	In5 <= "000000000000000000000" & Data & "000";
	In6 <= "00000000000000000000000" & Data & "0";
	In7 <= "000000000000000000000000" & Data     ;

	F1:	AdderNbit generic map(32)
		port map (	a => In1,
			  	b => In2,
				Cin => Cin,
				S => Out1,
				Cout => Cout
		);

	F2:	AdderNbit generic map(32)
		port map (	a => In3,
			  	b => In4,
				Cin => Cin,
				S => Out2,
				Cout => Cout
		);

	F3:	AdderNbit generic map(32)
		port map (	a => In5,
			  	b => In6,
				Cin => Cin,
				S => Out3,
				Cout => Cout
		);

	F4:	AdderNbit generic map(32)
		port map (	a => Out1,
			  	b => Out2,
				Cin => Cin,
				S => Out4,
				Cout => Cout
		);

	F5:	AdderNbit generic map(32)
		port map (	a => In7,
			  	b => Out3,
				Cin => Cin,
				S => Out5,
				Cout => Cout
		);

	F6:	AdderNbit generic map(32)
		port map (	a => Out4,
			  	b => Out5,
				Cin => Cin,
				S => Result,
				Cout => Cout
		);
End Behavioral;

--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : rgb2gray_components.vhd
-- Created date   : Thứ sáu, 24 Tháng hai Năm 2017 13:52:30 ICT
-- Author         : Huy Hung Ho
-- Last modified  : Thứ sáu, 24 Tháng hai Năm 2017 16:00:06 ICT
-- Desc           :
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;

Package rgb2gray_components is
	Component AdderNbit is
		Generic (N:	integer := 32);
    		Port (	a, b:   IN STD_LOGIC_VECTOR (N - 1 downto 0);
                	Cin:    IN STD_LOGIC;
                	S:      OUT STD_LOGIC_VECTOR (N - 1 downto 0);
                	Cout:   OUT STD_LOGIC);
	End component;

	Component MultRed is
        	Port (  Clk:    IN std_logic;
                	Data:   IN std_logic_vector(7 downto 0);
                	Result: OUT std_logic_vector(31 downto 0)
        	);
	End component;

	Component MultGreen is
        	Port (  Clk:    IN std_logic;
                	Data:   IN std_logic_vector(7 downto 0);
                	Result: OUT std_logic_vector(31 downto 0)
        	);
	End component;

	Component MultBlue is
        	Port (  Clk:    IN std_logic;
                	Data:   IN std_logic_vector(7 downto 0);
                	Result: OUT std_logic_vector(31 downto 0)
        	);
	End component;
End package;
--------------------------------------------------------------------------------
-- Project name   : LSI contest 2017
-- File name      : RGB2Gray.vhd
-- Created date   : Wed 22 Feb 2017
-- Author         : Huy Hung Ho
-- Last modified  : Mon 27 Feb 2017
-- Desc           :
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;
Use IEEE.numeric_std.all;
Use work.helper.all;

Entity RGB2Gray is
	Port (
		Clk:		IN std_logic;
		Data1:		IN byte;
		Data2:		IN byte;
		Data3:		IN byte;
		Product:	OUT byte
	);
End RGB2Gray;

Architecture Behavioral of RGB2Gray is
	Use	work.rgb2gray_components.all;

	Constant	Bias: std_logic_vector(31 downto 0) := std_logic_vector(to_unsigned(32768, 32));

	Signal	Mout1, Mout2, Mout3:	std_logic_vector(31 downto 0);
	Signal	Temp1, Temp2, Temp3:	std_logic_vector(31 downto 0);
	Signal	C:	std_logic_vector(0 to 2);
Begin
	R: MultRed
		port map (Clk, Data1, Mout1);

	G: MultGreen
		port map (Clk, Data2, Mout2);

	B: MultBlue
		port map (Clk, Data3, Mout3);

	A1: AdderNbit generic map (32)
		port map (Mout1, Mout2, '0', Temp1, C(0));

	A2: AdderNbit generic map (32)
		port map (Mout3, Bias, '0', Temp2, C(1));

	A3: AdderNbit generic map (32)
		port map (Temp1, Temp2, '0', Temp3, C(2));

	Product <= Temp3(23 downto 16);
End Behavioral;
--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : RGBtoGray_pkg.vhd
-- Created date   : Mon 13 Mar 2017
-- Author         : Huy Hung Ho
-- Last modified  : Mon 13 Mar 2017
-- Desc           :
--------------------------------------------------------------------------------
Library IEEE;
Use IEEE.std_logic_1164.all;
Use work.helper.all;

Package RGBtoGray_pkg is
        Component RGB2Gray is
                Port (
                        Clk:            IN std_logic;
                        Data1:          IN byte;
                        Data2:          IN byte;
                        Data3:          IN byte;
                        Product:        OUT byte
                );
        End component;

	Component Controller is
		Port (
			Clk:	IN std_logic;
			Start:	IN std_logic;
			Done:	OUT std_logic;
			LoadR:	OUT std_logic;
			LoadG:	OUT std_logic;
			LoadB:	OUT std_logic;
			StoreY: OUT std_logic;
			Move:	OUT std_logic
		);
	End component;
End package;
--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : RGBtoGrayTop.vhd
-- Created date   : Mon 13 Mar 2017
-- Author         : Huy Hung Ho
-- Last modified  : Fri 17 Mar 2017
-- Desc           :
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;
Use IEEE.std_logic_unsigned.all;
Use IEEE.numeric_std.all;
Use work.helper.all;
Use work.ram_pkg.all;

Entity RGBtoGrayTop is
	Port (
		Clk:	IN std_logic;
		Start:	IN std_logic;
		Done:	OUT std_logic
	);
End RGBtoGrayTop;

Architecture Behavioral of RGBtoGrayTop is
	Use work.ram_pkg.all;
	Use work.RGBtoGray_pkg.all;

	Signal	address_0, address_1:			addr_type;
	Signal	data_0, data_1:				byte;
	Signal	cs_0, cs_1, we_0, we_1, oe_0, oe_1:	std_logic;

	Signal	red:	byte;
	Signal	green:	byte;
	Signal	blue:	byte;
	Signal	gray:	byte;
	Signal	addr_load:	unsigned(addr_width-1 downto 0) := (others =>
		'0');
	Signal	addr_store:	unsigned(addr_width-1 downto 0) :=
		"100101100";
	Signal	LoadR, LoadG:		std_logic;
	Signal	LoadB, StoreY:		std_logic;
	Signal	Move:			std_logic;
Begin
	Main:	RGB2Gray
		port map (Clk, red, green, blue, gray);

	Ram:	Dual_ram generic map (addr_width)
		port map (address_0, data_0, cs_0, we_0, oe_0,
			address_1, data_1, cs_1, we_1, oe_1);

	Reg_R:	RegN generic map (data_width)
		port map (data_0, red, Clk, LoadR);

	Reg_G:	RegN generic map (data_width)
		port map (data_0, green, Clk, LoadG);

	Reg_B:	RegN generic map (data_width)
		port map (data_0, blue, Clk, LoadB);

	Ctrl:	Controller
		port map (Clk, Start, Done, LoadR, LoadG, LoadB, StoreY);

	data_0 <= gray when StoreY = '1' else (others => 'Z');

	cs_0		<= '1' when (LoadR or LoadG or LoadB or StoreY) = '1'
		 else '0';
	we_0		<= '1' when StoreY = '1' else '0';
	oe_0		<= '1' when (LoadR or LoadG or LoadB) = '1' else '0';
	address_0	<= std_logic_vector(addr_load) when LoadR = '1' else
		     	std_logic_vector(addr_load + 1) when LoadG = '1' else
			std_logic_vector(addr_load + 2) when LoadB = '1' else
			std_logic_vector(addr_store) when StoreY = '1';

	Process(Clk)
	Begin
		if rising_edge(Clk) then
			if Start = '0' then
				addr_load	<= to_unsigned(0, addr_width);
				addr_store	<= "100101100";
			elsif  StoreY = '1' then
				addr_load	<= addr_load + 3;
				addr_store	<= addr_store + 1;
			end if;
		end if;
	End process;
End Behavioral;
--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : tb_pixel.vhd
-- Created date   : Mon 27 Feb 2017
-- Author         : Huy Hung Ho
-- Last modified  : Mon 13 Mar 2017
-- Desc           :
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;
Use IEEE.numeric_std.all;

Entity tb_pixel is
End tb_pixel;

Architecture Behavioral of tb_pixel is
	Component RGB2Gray is
        Port (
                Clk:            IN std_logic;
                Data1:          IN std_logic_vector(7 downto 0);
                Data2:          IN std_logic_vector(7 downto 0);
                Data3:          IN std_logic_vector(7 downto 0);
                Product:        OUT std_logic_vector(7 downto 0)
        );
	End component;

	Signal	Clk:	std_logic;
	Signal period:	time := 1 ns;
	Signal	Data1, Data2, Data3:	std_logic_vector(7 downto 0);
	Signal	Product:		std_logic_vector(7 downto 0);
Begin
	uut:	RGB2Gray
		port map (	Clk => Clk,
				Data1 => Data1,
				Data2 => Data2,
				Data3 => Data3,
				Product => Product
		);

	-- Clock process definitions
	Clock: Process
	Begin
		Clk <= '0';
		wait for period/2;
		Clk <= '1';
		wait for period/2;
	End process Clock;

	Main:	process
	Begin
		wait for 10 ns;
		Data1 <= std_logic_vector(to_unsigned(0, 8));
		Data2 <= std_logic_vector(to_unsigned(0, 8));
		Data3 <= std_logic_vector(to_unsigned(0, 8));

		wait for 10 ns;
		Data1 <= std_logic_vector(to_unsigned(255, 8));
		Data2 <= std_logic_vector(to_unsigned(255, 8));
		Data3 <= std_logic_vector(to_unsigned(255, 8));

		wait for 10 ns;
		Data1 <= std_logic_vector(to_unsigned(50, 8));
		Data2 <= std_logic_vector(to_unsigned(10, 8));
		Data3 <= std_logic_vector(to_unsigned(240, 8));

		wait for 10 ns;
		Data1 <= std_logic_vector(to_unsigned(200, 8));
		Data2 <= std_logic_vector(to_unsigned(100, 8));
		Data3 <= std_logic_vector(to_unsigned(17, 8));

		wait;
	End process;
End Behavioral;

--------------------------------------------------------------------------------
-- Project name   : LSI Contest 2017
-- File name      : tb.vhd
-- Created date   : Mon 27 Feb 2017
-- Author         : Huy Hung Ho
-- Last modified  : Tue 14 Mar 2017
-- Desc           :
--------------------------------------------------------------------------------

Library IEEE;
Use IEEE.std_logic_1164.all;
Use IEEE.numeric_std.all;

Entity tb is
End tb;

Architecture Behavioral of tb is
	Component RGBtoGrayTop is
		Port (
			Clk:	IN std_logic;
			Start:	IN std_logic;
			Done:	OUT std_logic
		);
	End component;

	Signal	Clk, Start, Done:	std_logic;
	Signal	period:			time := 1 ns;
Begin
	uut:	RGBtoGrayTop
		port map (Clk, Start, Done);

	-- Clock process definitions
	Clock: Process
	Begin
		Clk <= '0';
		wait for period/2;
		Clk <= '1';
		wait for period/2;
	End process;

	-- Read output
	Read: process
	Begin
		wait for period * 5;
		Start <= '1';
		wait until Done = '1';
	end process;
End Behavioral;
