%
% Project name   :
% File name      : Proposed_non-normalize_featture_extraction.tex
% Created date   : Mon 17 Jul 2017 10:39:51 AM +07
% Author         : Ngoc-Sinh Nguyen
% Last modified  : Mon 17 Jul 2017 10:39:51 AM +07
% Desc           :
%
\section{Proposed non-normalize feature extraction}
\label{sec:proposed_non_normalize_feature_extraction}
In this work, we propose a robust and efficient methodology of finding the
two voted angles (bins) and calculating the magnitude of the two voted bins, 
which  only uses a set of very simple operations: shift and
addition.

As the Equation \ref{eq:dx}, \ref{eq:dy} in the Section
\ref{sec:conventional_non_normalize_feature_extraction_in_hog}, the $d_x$,
$d_y$ range are finite and depend on the range of pixel value. 
With the 8-bit length pixel,  the $d_x$, $d_y$ are integers in the range [-255, 255].
Consequently, the $\frac{d_y}{d_x}$ are float numbers in the set [-255, 255].
By examining all the cases of $\frac{d_y}{d_x}$ and the $\tan\phi$ values with
$\phi$ in the first quadrant, we
archive Table \ref{tab:tanphi_and_its_nearest_values}. 
This table shows the $\tan\phi$ values, its smaller and nearest
$\frac{d_y}{d_x}$, and its greater and nearest $\frac{d_y}{d_x}$.
Those numbers will play as the critical thresholds to determine the two voted bins of
a pixel $I(x,y)$.
In fact, all the divisor in $\frac{d_y}{d_x}$ are smaller than the 1024 in the
Equation \ref{eq:tan_mult_1024}. 

\begin{table}
	\centering
	\caption{$\tan\phi$ and its nearest values $\frac{d_y}{d_x}$ }
	\label{tab:tanphi_and_its_nearest_values}
	\begin{tabular}{|c|c|c|}
		\hline
		\rowcolor{lightgray}
		\textbf{Smaller and Nearest $\frac{d_y}{d_x}$ } & \textbf{$\tan\phi$} & \textbf{Greater and Nearest $\frac{d_y}{d_x}$ }
		\\\hline
		$\frac{43}{244}$ &	$\tan(10)$ & $\frac{3}{17}$
		\\\hline
		$\frac{56}{57}$  & $\tan(30)$  & $\frac{97}{168}$
		\\\hline
		$\frac{230}{193}$ & $\tan(50)$ & $\frac{87}{73}$
		\\\hline
		$\frac{91}{250}$ & $\tan(70)$ & $\frac{11}{4}$
		\\\hline
	\end{tabular}
\end{table}

Back to the ideas of HOG, it tries to represent the real gradient of pixel $I(x,y)$ into
form of two standard bins as Figure \ref{fig:M_Oxy} and  Equation \ref{eq:m_to_b_b}. 
The two Equations \ref{eq:x_to_b_b} and \ref{eq:y_to_b_b} are the consequent
equations of the Equation \ref{eq:m_to_b_b} in the Ox and Oy axis, respectively.
If we know about the $d_x$, $d_y$, the $\phi_i$ and the $\phi_{i + 1}$, the
magnitude of two voted bins will be the roots of system of two Equations
\ref{eq:x_to_b_b}-\ref{eq:y_to_b_b}.

\begin{figure}[h]
	\def\sscale{1.0\linewidth}
	\includegraphics[width=\sscale]{"imgs/M_Oxy"}
	\caption{Convert a vector into form of two vectors}
	\label{fig:M_Oxy}
\end{figure}

\begin{align}
	\overrightarrow{M} &= \overrightarrow{B_{\phi_i}} + \overrightarrow{B_{\phi_{i + 1}}}  \label{eq:m_to_b_b}	 \\
	\Vert\overrightarrow{M}\Vert \cos(\alpha) 
	&=  d_x \nonumber \\
	&= \Vert \overrightarrow{B_{\phi_i}} \Vert \cos(\phi_i)
	+  \Vert \overrightarrow{B_{\phi_{i+1}}} \Vert \cos(\phi_{i+1}) \label{eq:x_to_b_b}	 \\
	%
	\Vert\overrightarrow{M}\Vert \times \sin(\alpha) \vert 
	&= d_y \nonumber \\
	&= \Vert \overrightarrow{B_{\phi_i}} \Vert \sin(\phi_i)
	+  \Vert \overrightarrow{B_{\phi_{i+1}}} \Vert \sin(\phi_{i+1}) \label{eq:y_to_b_b}\\
	%
	\Vert \overrightarrow{B_{\phi_i}} \Vert &= \frac{sin(\phi_{i+1})d_x - cos(\phi_{i+1})d_y }{sin(20)} \label{eq:b1} \\
	\Vert \overrightarrow{B_{\phi_{i+1}}} \Vert &= \frac{cos(\phi)d_y - sin(\phi)d_x}{sin(20)} \label{eq:b2}
\end{align}



%% PLAY with ME

From the experiments, which are shown in the two previous paragraph, we propose
a methodology of calculating cell histogram generation with only shift and
addition operations.
Figure \ref{fig:dataflow} shows the details of the data flow of the proposed
methodology. 
As shown, the input contains 4 neighbor pixels $I(x+1)(y), I(x-1,y), I(x, y +
1), I(x, y - 1)$  of pixel $I(x,y)$.
The first step, the $d_x$ and $d_y$ are computed.
At the second step, we have absolute values of $d_x$ and $d_y$, and the
position of the gradient of pixel $I$.
If the sign of $d_x$ is opposite  sign of $d_y$, the gradient of $I(x,y)$ is in
the second quadrant.
Otherwise, the gradient is in the first quadrant.
Because the left side of Oy axis is a mirror of right side of Oy, we only
compute the magnitude of twos voted bin in the first quadrant.
Next, finding the two voted angles of the pixel $I(x,y)$ is via comparison
between $A \times d_x$ and $B \times d_y$, where $A$ is the dividend ,
and $B$ is the divisor in the in the Table
\ref{tab:tanphi_and_its_nearest_values}.
In this data flow, we uses only the greater and nearest value fraction
$\frac{d_y}{d_x}$ of $\tan\phi$. 
Depend on application, you are able to chose  the left side of the Table
\ref{tab:tanphi_and_its_nearest_values}. 
After have two voted angles, the magnitude of both angle are the roots of system
of two Equations \ref{eq:x_to_b_b} - \ref{eq:y_to_b_b}.
Finally, the $sign(d_x)$ and $sign(d_y)$ are used to determine the angle of the
current pixel and its twos voted angles, which are in the first quadrant or the second
quadrant?
If those angles are in the second quadrant, converting  the $\phi$ in the first
quadrant into the second quadrant by equation  $\phi = 180 - \phi$.

\begin{figure}[h]
	\def\sscale{1.0\linewidth}
	\includegraphics[width=\sscale]{"imgs/dataflow"}
	\caption{Data flow of proposed methodology}
	\label{fig:dataflow}
\end{figure}

As shown in the Figure~\ref{fig:dataflow} and Equations \ref{eq:b1} \ref{eq:b2}, all of multiply operations, we have already known one of two numbers.
It allows us converting all multiples into series of shift and addition.
Table \ref{tab:mult_2_shift_add} shows all of multiply cases in cell histogram
generation in form of shift and addition. 
With $\sin$ and $\cos$ functions, 8-bits length of fraction part is used, it
is equivalent to multiply 256.
To change the size of fraction part, we only need to change the $\cos,\sin$
parts in the Table \ref{tab:mult_2_shift_add}. 
For example, if  an application needs 10-bits length of fraction, the $\cos, \sin$
functions need to multiply 1024 instead of 256.
From the Table \ref{tab:mult_2_shift_add} and the data flow in
Figure~\ref{fig:dataflow}, the total number of operations to calculate two voted
bins spends above 30 additions and nearly 40  shifts.


\begin{table*}
	\centering
	\caption{Converting all multiply to shift and addition operations with 8-bit of fraction part}
	\label{tab:mult_2_shift_add}
	\begin{tabular}{|c|c|c|c|}
		\hline
		\rowcolor{lightgray}
		\textbf{$B \times d_y$} & \textbf{Shift and addition} & \textbf{$A \times d_x$} & \textbf{Shift and addition}
		\\\hline
		$4 \times d_y $ & $d_y << 2$ & $11 \times d_x$ & $(d_x << 3) + (d_x << 1) + d_y$
		\\\hline
		$73 \times d_y$  & $(d_y << 6) + (d_y << 3) + d_y$ & $87 \times d_x$ & $(d_x << 6) + (d_x << 4) + (d_x << 3) - d_x$
		\\\hline
		$168 \times d_y$ & $(d_y << 7) + (d_y << 5) + (d_y << 3)$ & $97 \times d_x$ & $(d_x << 6) + (d_x << 5) + d_x$
		\\\hline
		$17 \times d_y$ & $(d_y << 4) + d_y$ & $3 \times d_x$ & $(d_x << 1)  + d_x$
		\\\hline
		$cos(10) \times 256 \times d_y$ & $(d_y << 8) - (d_y << 2)$   & $sin(10) \times 256 \times d_x$ & $(d_x << 5) + (d_x << 3) + (d_x << 2)$
		\\\hline
		$cos(30) \times 256 \times d_y$ & $(d_y << 8 - (d_y << 5) - (d_y << 1)$ & $sin(30) \times 256 \times d_x$ & $(d_x << 7) $
		\\\hline
		$cos(50) \times 256 \times d_y$ & $(d_y << 7) + (d_y << 5) + (d_y << 2) + d_y$ & $sin(50) \times 256 \times d_x$ & $(d_x << 7) + (d_x << 6) + (d_x << 2)$
		\\\hline
		$cos(70) \times 256 \times d_y$ & $(d_y << 6) + (d_y << 4) + (d_y << 3) $ & $sin(70) \times 256 \times d_x$ & $(d_x << 8) - (d_x << 4) + d_x$
		\\\hline
		$cos(90) \times 256 \times d_y$ & $0$ & $sin(90) \times 256 \times d_x$ & $d_x << 8$
		\\\hline
		$\frac{1}{sin(20)}$ & $2  + \frac{15}{16}$ & &
		\\\hline
	\end{tabular}
\end{table*}



