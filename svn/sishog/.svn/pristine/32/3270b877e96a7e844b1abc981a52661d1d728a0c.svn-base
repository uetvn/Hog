%
% Project name   :
% File name      : Conventional_non-normalize_feature_extraction_in_HOG.tex
% Created date   : Mon 17 Jul 2017 10:38:45 AM +07
% Author         : Ngoc-Sinh Nguyen
% Last modified  : Mon 17 Jul 2017 10:38:45 AM +07
% Desc           :
%

\section{Cell histogram generation and its approximations} 
\label{sec:conventional_non_normalize_feature_extraction_in_hog}

\subsection{Conventional cell histogram generation}
\label{sub:conventional_hog}

Histogram of Oriented Gradient (HOG), pioneered by DALAL and
TRIGGS\cite{dalal2005hog},
become one of the most popular methods for feature extraction.
In the conventional HOG, the cell histogram generation part is the most dominant
power consumption, up to 58\% HOG power in Takagi's work \cite{takagi2013sdh}.
Authors in \cite{mizuno2012ash} analyzed the cell histogram generation part account for 91\%
workload in detection window-based approach.

Equation \ref{eq:dx} - \ref{eq:M_{j+1}} present all equations using in the conventional HOG.
As shown, the high complexity of the cell histogram generation comes
from its complex operations: two squares, one square root, one inverse tangent, four floating
point multiplications.

\begin{IEEEeqnarray}{cc}
	d_{x}     &= I(x, y + 1) - I (x, y - 1) \label{eq:dx} \\
	d_{y}     &= I(x + 1, y) - I (x - 1, y) \label{eq:dy}
\end{IEEEeqnarray}

\textrm{Gradient magnitude calculation:
	\begin{IEEEeqnarray}{c}
		\magM     = \sqrt{ d_x^2 + d_y^2 } \label{eq:M(x,y)}
	\end{IEEEeqnarray}
}
\textrm{Gradient orientation/angle calculation:
	\begin{IEEEeqnarray}{c}
		\alpha     = \arctan\Big( {\frac{d_y}{d_x}} \Big) \label{eq:phi}
	\end{IEEEeqnarray}
} 
\textrm{Two quantized bins(orientation and magnitude): 
	%\begin{subequations}
	\begin{IEEEeqnarray}{cl}
		\theta_i < \alpha < \theta_{i+1}
		\magBi   &=  \magM \times \frac{\alpha - \theta_i}{w}  \label{eq:M_{j}} \\
		\magBii  &= \magM \times \frac{\theta_{j+1} - \alpha}{w} \label{eq:M_{j+1}}
	\end{IEEEeqnarray}
	%\end{subequations}
} 
where: \begin{itemize}
	\item $\magM$ is the gradient magnitude of pixel $I(x,y)$
	\item $\alpha$ is the gradient orientation of pixel $I(x,y)$
	\item $\theta_j$, $\theta_{j+1}$ are two  quantized orientations.
	\item $\magBi, \magBii$  are the magnitude of
		two quantized orientations: $\theta_i$, $\theta_{j+1}$.
	\item $w$ is the angle distance between two continuous orientations, $w = 20$
\end{itemize}

In order to reduce the complexity of cell histogram generation and to be able
for hardware implementation, several approximate algorithms have been applied.
All of approximate models have tried to convert all non-linear operations in
gradient magnitude and gradient orientation computation
into form of basic operations: shift and addition.

\subsection{Gradient magnitude approximations}
Computing gradient magnitude by L2-norm (Equation \ref{eq:M(x,y)})  spends
two squares and one square root, which are very complex to implement into
hardware robustly.
To solve this problem, the most simplest methodology is using LUT as
\cite{kadota2009hah}.
In order to avoid the high areas cost as LUT, approximate computations have been applied.
Papers \cite{iandola2015leh} and
\cite{suleiman2016ehi}  have employed L1-norm as Equation \ref{eq:norm1}  instead of L2-norm.
Other papers \cite{hsiao2016hdh} \cite{pei-yinchen2014ehia}  have used an
approximate model, called square root approximation technique (SRA) as Equation \ref{eq:sra}.
A patent \cite{munteanu2016mph}  have implemented Equation \ref{eq:munteanu}. 
However, approximate models reduce the accuracy level.

\begin{IEEEeqnarray}{cl}
	\magM & \approx | d_x| + |d_y| \label{eq:norm1} \\
	\magM & \approx max((0.875\times g_{max} + 0.5 g_{min}), g_{max}) \label{eq:sra} \\
	\magM & \approx |d_x| + |d_y| - \frac{g_{min}}{2} \label{eq:munteanu}
\end{IEEEeqnarray}
where $g_{max}$ and $g_{min}$ is the maximum and minimum of $ |d_x|, |d_y|$,
respectively.

\subsection{Gradient orientation approximations}
Inverse tangent operation is  the most challenge for hardware implementation. There
are several approaches in practice to implement this non-linear operation.
\cite{iandola2015leh} has used full LUT for inverse tangent, and  consumed 256KB. 
\cite{peker2012heh} has combined the LUT and piece-wise approximations to obtain
high accuracy with less demand on the resources  .
\cite{takagi2013sdh} has applied by CORDIC  to avoid high memory resources.
However, CORDIC module is usually implemented with many iterations to obtain acceptable calculation
precision.

\subsection{Determining two quantized orientation without gradient orientation}
\label{sub:determining_two_quantized_bins_without_gradient_orientation}
A more effective approach is bin's boundary angles.
In this method, the actual angle of the gradient does not need to be calculate.
It uses Equation \ref{eq:angle_bound} to determines the two quantized gradient angles. 
In order to simplify the implementation, Equation \ref{eq:angle_bound} has been convert to some
other formulas. 
Paper \cite{pei-yinchen2014ehia} has used Equation \ref{eq:fix_tan} with  fixed
$\tan\theta$.
In contrast, publications \cite{negi2011dpo} \cite{takagi2013sdh}
\cite{suleiman2016ehi} \cite{hsiao2016hdh} \cite{bauer2010fak}
\cite{cao2008rvs}  have  multiplied $\tan\theta$ with a constant A, then
rounding $A\tan\theta$ value as Equation \ref{eq:tan_mult_1024}.

\begin{IEEEeqnarray}{c}
	\tan\theta_1 < \frac{d_y}{d_x} < \tan\theta_2 \label{eq:angle_bound} \\
	\IEEEyesnumber
	\left\{ \begin{array}{rcl}
		\tan\theta_1\times d_x < d_y < \tan\theta_2\times d_x \IEEEyesnumber \label{eq:fix_tan} \\
		\tan\theta = \sum^{n}_{i = -m}{2^{i}},m, n \in N \IEEEyesnumber \label{eq:tan}
	\end{array}\right.\\
	\lfloor A\times\tan\theta_1\rceil\times d_x < A\times d_y < \lfloor A\times\tan\theta_2 \rceil \times d_x \label{eq:tan_mult_1024}
\end{IEEEeqnarray}

Converting Equation \ref{eq:angle_bound} into Equation \ref{eq:fix_tan}  and
\ref{eq:tan_mult_1024} has  caution  of choosing fixed $\tan\theta$ or
the $A$ values.
It affects to determine the two quantized orientation directly.
Let take an example, a $\frac{d_y}{d_x} \equiv \frac{56}{97} = 0.57732 < \tan30$
expects to contribute its gradient to two angles: 10 and 30 degree, but the
$\frac{97}{168} = 0.577381$ is in the angle range (30:50) degree.
In this case, the $A$ value have to be equal or greater than  $10^5$ to distinct
the those two values.
However, increasing the $A$ values means increasing the complexity of
implementation. 

Another disadvantage  of this method is that it does not have enough information for
voting magnitude as Equation \ref{eq:M_{j}} and \ref{eq:M_{j+1}}.  
In this moment, those mentioned papers using this methodology have employed fixed weight for voting magnitude.
Hence, it reduces the accuracy of cell histogram generation.


